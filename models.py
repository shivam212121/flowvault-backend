"""
# /home/ubuntu/flowvault_backend_fastapi/models.py

from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, ForeignKey, Text, JSON
from sqlalchemy.orm import relationship, sessionmaker, declarative_base
from sqlalchemy.sql import func # for server_default=func.now()
import os

DATABASE_URL = os.environ.get("DATABASE_URL", "postgresql://postgres:Meowmeow%4069@db.fcopsfcoochqgqzffryl.supabase.co:5432/postgres")

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(String, primary_key=True, index=True) # Clerk User ID
    email = Column(String, unique=True, index=True, nullable=False)
    name = Column(String, nullable=True)
    stripe_customer_id = Column(String, unique=True, nullable=True)
    stripe_subscription_id = Column(String, unique=True, nullable=True)
    subscription_status = Column(String, nullable=True) # e.g., active, canceled, past_due
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    swipe_files = relationship("SwipeFile", back_populates="owner")
    collections = relationship("Collection", back_populates="owner")
    teams_owned = relationship("Team", back_populates="owner")
    team_memberships = relationship("TeamMember", back_populates="user")

class Team(Base):
    __tablename__ = "teams"
    id = Column(String, primary_key=True, index=True) # e.g., team_xxxx (Clerk Org ID or custom)
    name = Column(String, nullable=False)
    owner_user_id = Column(String, ForeignKey("users.id"), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    owner = relationship("User", back_populates="teams_owned")
    members = relationship("TeamMember", back_populates="team")
    collections = relationship("Collection", back_populates="team")

class TeamMember(Base):
    __tablename__ = "team_members"
    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    team_id = Column(String, ForeignKey("teams.id"), nullable=False)
    user_id = Column(String, ForeignKey("users.id"), nullable=False)
    role = Column(String, nullable=False, default="member") # e.g., admin, member
    joined_at = Column(DateTime(timezone=True), server_default=func.now())

    team = relationship("Team", back_populates="members")
    user = relationship("User", back_populates="team_memberships")

class Collection(Base):
    __tablename__ = "collections"
    id = Column(String, primary_key=True, index=True) # e.g., coll_xxxx
    name = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    owner_user_id = Column(String, ForeignKey("users.id"), nullable=True) # Null if team collection
    team_id = Column(String, ForeignKey("teams.id"), nullable=True) # Null if personal collection
    is_private = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    owner = relationship("User", back_populates="collections")
    team = relationship("Team", back_populates="collections")
    swipe_files_association = relationship("CollectionSwipeFile", back_populates="collection")

class McpJob(Base):
    __tablename__ = "mcp_jobs"
    id = Column(String, primary_key=True, index=True) # UUID generated by backend
    target_url = Column(String, nullable=False)
    status = Column(String, nullable=False, default="queued") # queued, processing, completed, failed
    celery_task_id = Column(String, nullable=True, index=True)
    submitted_by_user_id = Column(String, ForeignKey("users.id"), nullable=False)
    swipe_file_id = Column(String, ForeignKey("swipe_files.id"), nullable=True)
    error_message = Column(Text, nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    submitter = relationship("User") # No back_populates needed if User doesn't list mcp_jobs
    generated_swipe_file = relationship("SwipeFile", back_populates="source_job")

class SwipeFile(Base):
    __tablename__ = "swipe_files"
    id = Column(String, primary_key=True, index=True) # e.g., sf_xxxx
    title = Column(String, nullable=True)
    original_url = Column(String, nullable=False)
    owner_user_id = Column(String, ForeignKey("users.id"), nullable=False)
    mcp_job_id = Column(String, ForeignKey("mcp_jobs.id"), nullable=True, unique=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    # Add fields like tags, notes, etc. later

    owner = relationship("User", back_populates="swipe_files")
    source_job = relationship("McpJob", back_populates="generated_swipe_file")
    screens = relationship("Screen", back_populates="swipe_file")
    collections_association = relationship("CollectionSwipeFile", back_populates="swipe_file")

class Screen(Base):
    __tablename__ = "screens"
    id = Column(String, primary_key=True, index=True) # e.g., scr_xxxx
    swipe_file_id = Column(String, ForeignKey("swipe_files.id"), nullable=False)
    image_url = Column(String, nullable=False) # URL from S3/CDN
    thumbnail_url = Column(String, nullable=True)
    order_index = Column(Integer, nullable=False)
    alt_text = Column(String, nullable=True)
    metadata = Column(JSON, nullable=True) # e.g., dimensions, annotations
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    swipe_file = relationship("SwipeFile", back_populates="screens")

class CollectionSwipeFile(Base):
    __tablename__ = "collection_swipe_files"
    collection_id = Column(String, ForeignKey("collections.id"), primary_key=True)
    swipe_file_id = Column(String, ForeignKey("swipe_files.id"), primary_key=True)
    added_at = Column(DateTime(timezone=True), server_default=func.now())

    collection = relationship("Collection", back_populates="swipe_files_association")
    swipe_file = relationship("SwipeFile", back_populates="collections_association")

# Utility function to create tables (for initial setup, migrations are better for production)
def create_db_tables():
    Base.metadata.create_all(bind=engine)

if __name__ == "__main__":
    # This will create the tables if the script is run directly.
    # For production, use Alembic migrations.
    print("Creating database tables...")
    create_db_tables()
    print("Database tables created (if they didn't exist).")

"""
